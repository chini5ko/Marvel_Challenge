{"version":3,"sources":["components/containerStyles.module.css","components/EachGifContainer.module.css","components/marvelSearchIconStyle.module.css","svg/marvelSearchIcon.svg","svg/marvelSearchIconHover.svg","components/EachGifContainer.js","components/GifContainer.js","components/MarvelSearchIcon.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","EachGifContainer","url","window","open","src","this","props","gifURL","key","index","alt","title","type","onClick","openNewTabForGif","gifEmbed_url","className","style","imgSize","cursor","gifInteraction","Component","GifContainer","state","trendingGifs","searchGifs","didUserSearch","renderTrending","url_giphy_request","items","fetch","then","response","json","giphyJson","data","entries","d","gifJson","gitTitle","downsizedURL","images","embed_url","push","gifType","length","searchValue","setState","catch","url_giphy_search","renderImgElement","MarvelSearchIcon","useState","searchIcon","isHovered","onMouseOver","onMouseOut","icon","marvelSearchIconHover","marvelSearchIcon","Container","handleKeyPress","event","searchCurrentValue","target","value","emptyWarningDisplayed","performSearch","gifContainerEl","current","renderSearch","currentGitsDescription","clickedHome","React","createRef","warning","containerWrap","home","searchBarContainer","placeholder","onKeyUp","searchBar","autoFocus","searchIConContainer","warningContainer","displayEmptyWarning","currentGifDes","gifDisplayContainer","ref","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.01dc1971.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerWrap\":\"containerStyles_containerWrap__1-r0J\",\"searchBarContainer\":\"containerStyles_searchBarContainer__2aHDC\",\"home\":\"containerStyles_home__nj1mp\",\"currentGifDes\":\"containerStyles_currentGifDes__1T6BV\",\"gifDisplayContainer\":\"containerStyles_gifDisplayContainer__2k49U\",\"warningContainer\":\"containerStyles_warningContainer__5r1l7\",\"warning\":\"containerStyles_warning__P_Uym\",\"searchBar\":\"containerStyles_searchBar__1snpq\",\"searchIConContainer\":\"containerStyles_searchIConContainer__1lPDy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"imgSize\":\"EachGifContainer_imgSize__1NrV6\",\"gifInteraction\":\"EachGifContainer_gifInteraction__DIQtU\",\"cursor\":\"EachGifContainer_cursor__2DOpt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"icon\":\"marvelSearchIconStyle_icon__5trId\"};","module.exports = __webpack_public_path__ + \"static/media/marvelSearchIcon.e5e0f05a.svg\";","module.exports = __webpack_public_path__ + \"static/media/marvelSearchIconHover.b8caa593.svg\";","import React, { Component } from 'react'\r\nimport style from './EachGifContainer.module.css'\r\n\r\nclass EachGifContainer extends Component {\r\n\r\n    openNewTabForGif(url) {\r\n        window.open(url, '_blank');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n                <img src={this.props.gifURL} key={this.props.index} alt={this.props.title} type={this.props.type}\r\n                onClick={() => this.openNewTabForGif(this.props.gifEmbed_url)}  \r\n                className={`${style.imgSize} ${style.cursor}  ${style.gifInteraction}`}  ></img>\r\n        )\r\n    }\r\n}\r\n\r\nexport default EachGifContainer","import React, { Component } from 'react'\r\nimport EachGiftEl from './EachGifContainer'\r\n\r\nclass GifContainer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            trendingGifs: null,\r\n            searchGifs: null,\r\n            didUserSearch: props.didUserSearch,\r\n            type:null\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.renderTrending();\r\n    }\r\n\r\n    renderImgElement(url_giphy_request, type) {\r\n        var items = []\r\n\r\n        // fetch JSON from Giphy\r\n        fetch(url_giphy_request)\r\n        .then((response) => {\r\n            return response.json();\r\n        })\r\n        .then((giphyJson) => {\r\n\r\n            var data = giphyJson['data'];\r\n                \r\n            for (const d of data.entries()) {\r\n                let index = d[0];\r\n                let gifJson = d[1];\r\n                let gitTitle = gifJson.title;\r\n                let images = gifJson.images;\r\n                let downsized = images['downsized'];\r\n                let downsizedURL = downsized['url'];\r\n                let gifEmbed_url = gifJson.embed_url;\r\n                \r\n               items.push(<EachGiftEl index={index} key={index} gifURL={downsizedURL} title={gitTitle} gifEmbed_url={gifEmbed_url}\r\n                gifType={this.state.type}></EachGiftEl>)\r\n            }\r\n\r\n            if(items.length===0){\r\n                items.push(<h6>No Gifs for this search: { this.props.searchValue} </h6>)\r\n            }\r\n            if(type==='trending'){\r\n                this.setState({ trendingGifs: items })\r\n            }\r\n            if(type==='search'){\r\n                this.setState({ searchGifs: items })\r\n            }\r\n\r\n        }).catch(function(){\r\n            items.push(<h6 >Failed Connection </h6>)\r\n        });\r\n    }\r\n\r\n    renderSearch(){\r\n        let numberOfSearch = 30;\r\n        let searchText = (this.props.searchValue.length>0) ? this.props.searchValue : 'Marvel';\r\n        var url_giphy_search = 'https://api.giphy.com/v1/gifs/search?api_key=Erd7FLQSsRKYF24NdrQl54yQEJ1MOuEv&q=' + searchText+'&limit='+numberOfSearch+'&offset=0&rating=G&lang=en';\r\n        \r\n        this.renderImgElement( url_giphy_search , 'search');\r\n        this.setState({ didUserSearch: true,\r\n                        type: 'search'\r\n        })\r\n        \r\n    }\r\n\r\n    renderTrending(){\r\n        let numberOfSearch = 30;\r\n        var url_giphy_trending = 'https://api.giphy.com/v1/gifs/trending?api_key=Erd7FLQSsRKYF24NdrQl54yQEJ1MOuEv&limit=' +numberOfSearch+'&rating=G';\r\n        this.setState({ didUserSearch: false,\r\n                        type: 'trending' })\r\n        this.renderImgElement( url_giphy_trending , 'trending');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                    {this.state.didUserSearch ? this.state.searchGifs  : this.state.trendingGifs}\r\n         \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GifContainer","import React, { useState } from 'react';\r\nimport style from './marvelSearchIconStyle.module.css';\r\nimport marvelSearchIcon from '../svg/marvelSearchIcon.svg'\r\n import marvelSearchIconHover from '../svg/marvelSearchIconHover.svg'\r\n\r\nconst MarvelSearchIcon = () => {\r\n    const [searchIcon, isHovered] = useState(false);\r\n\r\n    function searchIconHovered(){\r\n        isHovered(true);\r\n    }\r\n\r\n    function searchIconNotHovered() {\r\n        isHovered(false);\r\n    }\r\n\r\n    return (\r\n          <img onMouseOver={searchIconHovered} onMouseOut={searchIconNotHovered} alt=\"marvel-search-icon\"\r\n          className={style.icon} src={searchIcon ? marvelSearchIconHover : marvelSearchIcon}></img>\r\n        \r\n    )\r\n}\r\n\r\nexport default MarvelSearchIcon;","import React, { Component } from 'react'\r\nimport GifContainer from './GifContainer'\r\nimport style from './containerStyles.module.css'\r\nimport MarvelSearchIcon from './MarvelSearchIcon'\r\n\r\nclass Container extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            didUserSearch: false,\r\n            searchCurrentValue: \"\",\r\n            emptyWarningDisplayed: false,\r\n            currentGitsDescription: \"Trending GIFs\"\r\n        };\r\n        this.gifContainerEl = React.createRef();\r\n    }\r\n\r\n    handleKeyPress = (event) => {\r\n\r\n        this.setState({\r\n            searchCurrentValue: event.target.value,\r\n            didUserSearch: false,\r\n            emptyWarningDisplayed: false\r\n        })\r\n\r\n        if (event.key === 'Enter') {\r\n            this.performSearch();\r\n        }\r\n    }\r\n\r\n    performSearch = () => {\r\n        this.gifContainerEl.current.renderSearch();\r\n        this.setState({currentGitsDescription: this.state.searchCurrentValue})\r\n\r\n        if(this.state.searchCurrentValue.length===0){\r\n            this.setState({emptyWarningDisplayed: true,\r\n                           currentGitsDescription: \"Marvel\"})\r\n             }\r\n    }\r\n\r\n    displayEmptyWarning() {\r\n        if (this.state.emptyWarningDisplayed) {\r\n            return <h6 className={style.warning}>Search field is empty<br/> Default value for empty search is Marvel</h6>\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    clickedHome = () =>{\r\n        this.gifContainerEl.current.renderTrending();\r\n        this.setState({currentGitsDescription: \"Trending GIFs\"})\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <div className={style.containerWrap}>\r\n                <div onClick={this.clickedHome} className={style.home}>Home</div>\r\n                    <div className={style.searchBarContainer}>\r\n\r\n                        <input type=\"text\" placeholder=\"Search GIFs\" onKeyUp={this.handleKeyPress} className={style.searchBar} autoFocus />\r\n\r\n                        <div onClick={this.performSearch} className={style.searchIConContainer}>\r\n                            <MarvelSearchIcon />\r\n                        </div>\r\n\r\n                        <div className={style.warningContainer}>{this.displayEmptyWarning()}</div>\r\n                    </div>\r\n                <div className={style.currentGifDes}> #{this.state.currentGitsDescription}</div>\r\n\r\n                    <div className={style.gifDisplayContainer}>\r\n                        <GifContainer ref={this.gifContainerEl} didUserSearch={this.state.didUserSearch} searchValue={this.state.searchCurrentValue} />\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Container\r\n","import React from 'react';\r\nimport Container from './components/Container'\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Container/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}